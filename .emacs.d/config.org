#+Title: MY GNU Emacs Config
#+AUTHOR: Shashank.

* Startup Time 

#+begin_src emacs-lisp
;; Startup time
(defun efs/display-startup-time ()
  (message
   "Emacs loaded in %s with %d garbage collections."
   (format
    "%.2f seconds"
    (float-time
     (time-subtract after-init-time before-init-time)))
   gcs-done))
;; Minimize garbage collection during startup
(setq gc-cons-threshold most-positive-fixnum)

;; Lower threshold back to 8 MiB (default is 800kB)
(add-hook 'emacs-startup-hook
		  (lambda ()
			(setq gc-cons-threshold (expt 2 23))))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(add-to-list 'load-path (expand-file-name "custom/bookmark-plus" user-emacs-directory))
(add-to-list 'load-path (expand-file-name "custom/bookmark-plus/bookmark+-mac.el" user-emacs-directory))
(require 'bookmark+)

(setq initial-scratch-message ";; ‚ïî‚ïê‚ïó‚îå‚îÄ‚îê‚î¨‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚î¨‚îê‚îå‚îÄ‚îê‚î¨ ‚î¨\n;; ‚ïö‚ïê‚ïó‚îÇ  ‚îú‚î¨‚îò‚îú‚îÄ‚î§ ‚îÇ ‚îÇ  ‚îú‚îÄ‚î§\n;; ‚ïö‚ïê‚ïù‚îî‚îÄ‚îò‚î¥‚îî‚îÄ‚î¥ ‚î¥ ‚î¥ ‚îî‚îÄ‚îò‚î¥ ‚î¥\n")
(when init-file-debug
  (setq use-package-verbose t
        use-package-expand-minimally nil
        use-package-compute-statistics t
        debug-on-error t))

    #+end_src
    
* Package manager
** Directions
- Use the :init keyword to execute code before a package is loaded. It accepts one or more forms
- Similarly, :config can be used to execute code after a package is loaded. In cases where loading is
  done lazily (see more about autoloading below), this execution is deferred until after the autoload
  occurs:
- example :
  (use-package color-moccur
  :commands (isearch-moccur isearch-all)
  :bind (("M-s O" . moccur)
  :map isearch-mode-map
  ("M-o" . isearch-moccur)
  ("M-O" . isearch-moccur-all))
  :init
  (setq isearch-lazy-highlight t)
  :config
  (use-package moccur-edit))
- to bind keys to major/minor modes :
  (use-package ace-jump-mode
  :bind ("C-." . ace-jump-mode))
- This does two things: first, it creates an autoload for the ace-jump-mode command
  and defers loading of ace-jump-mode until you actually use it. Second, it binds the key C-. to that
  command. After loading, you can use M-x describe-personal-keybindings to see all such keybindings
  you've set throughout your .emacs file.
- (use-package avy
  :bind ("C-:" ("Jump to char" . avy-goto-char)
  "M-g f" ("Jump to line" . avy-goto-line))) example.
- (use-package helm
  :bind (:map helm-command-map
  ("C-c h" . helm-execute-persistent-action)))
  The effect of this statement is to wait until helm has loaded, and then to bind the key C-c h to
  helm-execute-persistent-action within Helm's local keymap, helm-command-map.
- (use-package company
  :hook
  (prog-mode . company-mode)
  (text-mode . company-mode))

  (use-package company
  :commands company-mode
  :init
  (add-hook 'prog-mode-hook #'company-mode)
  (add-hook 'text-mode-hook #'company-mode)) these is how hook is made.
  - :custom is used to play with the custom variables in the package.
    (use-package comint
    :custom
    (comint-buffer-maximum-size 20000 "Increase comint buffer size.")
    (comint-prompt-read-only t "Make the prompt read only."))
  - :costom-faces uses :- 
    (use-package zenburn-theme
    :preface
    (setq my/zenburn-colors-alist
    '((fg . "#DCDCCC") (bg . "#1C1C1C") (cyan . "#93E0E3")))
    :custom-face
    (region ((t (:background ,(alist-get my/zenburn-colors-alist 'cyan)))))
    :config
    (load-theme 'zenburn t))
** Config
#+begin_src emacs-lisp
(require 'package)
(require 'use-package)
;; This is only needed once, near the top of the file
(eval-when-compile
  ;; Following line is not needed if use-package.el is in ~/.emacs.d
  (add-to-list 'load-path "/Users/shashank/.emacs.d/elpa/use-package-2.4.5")
  (require 'use-package))
(use-package package
  :init
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
						   ("melpa" . "http://melpa.org/packages/")))
  (add-to-list 'package-archives '("melpa stable" . "http://stable.melpa.org/packages/"))
  (package-initialize)
										;	(package-refresh-contents)
  )

#+end_src

* Evil-mode
** Config
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :after undo-tree
  :demand t
  :config
  (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
  (define-key evil-normal-state-map (kbd "C-e") #'evil-mode)
  (define-key evil-insert-state-map (kbd "RET") #'evil-ret-and-indent)
  (define-key evil-insert-state-map (kbd "RET") #'evil-ret-and-indent)
  (define-key evil-insert-state-map (kbd "jk") #'evil-normal-state)
  (define-key evil-normal-state-map "u" 'undo-tree-undo)
  (define-key evil-normal-state-map (kbd "C-r") 'undo-tree-redo)
  (define-key evil-normal-state-map (kbd "C-o") #'vterm-toggle-cd)
  (define-key evil-normal-state-map (kbd "<space>wo") #'delete-other-window)
  (add-hook 'emacs-startup-hook #'evil-mode)
  )
(use-package undo-tree
  :ensure t
  :demand t
  :config
  (global-undo-tree-mode t)
  )
;; (loop for (mode . state) in '((inferior-emacs-lisp-mode . emacs)
;; 			    (nrepl-mode . insert)
;; 			    (pylookup-mode . emacs)
;; 			    (comint-mode . normal)
;; 			    (shell-mode . insert)
;; 			    (git-commit-mode . insert)
;; 			    (git-rebase-mode . emacs)
;; 			    (term-mode . emacs)
;; 			    (help-mode . emacs)
;;                           (org-mode . normal)
;; 			    (helm-grep-mode . emacs)
;; 			    (grep-mode . emacs)
;; 			    (bc-menu-mode . emacs)
;; 			    (magit-branch-manager-mode . emacs)
;; 			    (rdictcc-buffer-mode .emacs)
;; 			    (dired-mode . emacs)
;; 			    (wdired-mode . normal)
;; 			    (cc-mode . normal))
;;   do (evil-set-initial-state mode state))
#+end_src

* Fonts
Defining the various fonts that Emacs will use.

#+begin_src emacs-lisp
(set-face-attribute 'default nil
					:font "Fira code"
					:height 175
					:weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
					:slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
					:slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
;;(add-to-list 'default-frame-alist '(font . "JetBrains Mono-11"))

;; Uncomment the following line if line spacing needs adjusting.
;;(setq-default line-spacing 0.12)

#+end_src

* Gui and theme
** Disable Menubar, Toolbars and Scrollbars

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(electric-pair-mode 1) ;auto bracket completion
(setq tab-width 4)
(setq ring-bell-function 'ignore)
(setq user-full-name "Annangi Shashank Babu"
	  user-mail-address "shashankbabu2004@gmail.com")
#+end_src

** Display

Line Numbers and Truncated Lines

#+begin_src emacs-lisp
(global-display-line-numbers-mode nil)
(global-visual-line-mode nil)
(setq display-line-numbers-type 'relative)
(setq split-width-threshold 0)
(setq split-height-threshold nil)
(setq compilation-window-height 40)
(desktop-save-mode t)
(setq desktop-path '("." "~/.emacs.d/var/desktop/" "~"))
(add-hook 'prog-mode-hook #'display-line-numbers-mode);;not working
#+end_src

** Themes
#+begin_src emacs-lisp
					;(load-theme 'wheatgrass t)
					;(use-package catppuccin-theme
					;   :ensure t
					;   :defer t
					;    :demand t 
					;   :load-path "themes"
					;   :init
					;    (setq catppuccin-flavor 'mocha) ;; or 'latte, 'macchiato, or 'mocha
					;   :config
					;    (load-theme 'catppuccin :no-confirm)
					;    (catppuccin-reload)
					;)
					;(load-theme 'catppuccin :no-confirm)


;(use-package doom-themes :demand t :defer t :ensure t :init
;  (load-theme 'doom-one t))
(load-theme 'zenburn t)
;(load-theme
;  'ujelly t) (load-theme 'jbeans t)
#+end_src 

* Which-key

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :demand t
  :config
  (which-key-mode)
  :init
  (setq which-key-side-window-location 'bottom
	which-key-sort-order #'which-key-description-order
	which-key-sort-uppercase-first nil
	which-key-add-column-padding 1
	which-key-max-display-columns nil
	which-key-min-display-lines 10
	which-key-side-window-slot -10
	which-key-side-window-max-height 0.50
	which-key-idle-delay 1.2
	which-key-max-description-length 50
	which-key-allow-imprecise-window-fit nil
	which-key-separator " ‚Üí " ))
#+end_src

* Org mode setup
#+begin_src emacs-lisp
(use-package org
  :ensure t
  :init
  (setq org-directory "~/Documents/org/"
	org-default-notes-file (expand-file-name "notes.org" org-directory))
  :config
  (setq org-link-abbrev-alist
	'(("google" . "http://www.google.com/search?q=")
	  ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
	  ("ddg" . "https://duckduckgo.com/?q=")
	  ("wiki" . "https://en.wikipedia.org/wiki/"))
	org-agenda-files '("~/Documents/org/")
	org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
	'((sequence
	   "TODO(t)"           ; A task that is ready to be tackled
	   "HIGHLIGHT(h)"           ; highlight of the day 
	   "|"                 ; The pipe necessary to separate "active" states and "inactive" states
	   "DONE(d)"           ; Task has been completed
	   )) ; Task has been cancelled
	org-ellipsis " ‚ñº ")
  :config
  (setq
					;org-fancy-priorities-list '("[A]" "[B]" "[C]")
					;org-fancy-priorities-list '("‚ùó" "[B]" "[C]")
   org-fancy-priorities-list '("üü•" "üüß" "üü®")
   org-priority-faces
   '((?A :foreground "#ff6c6b" :weight bold)
     (?B :foreground "#98be65" :weight bold)
     (?C :foreground "#c678dd" :weight bold))
   org-agenda-block-separator 8411)
  (setq org-startup-indented t)           ;; Indent according to section
  (setq org-startup-with-inline-images t) ;; Display images in-buffer by default
  (setq org-agenda-custom-commands
        '(("v" "A better agenda view"
           (
            (tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (tags "PRIORITY=\"B\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
            (tags "PRIORITY=\"C\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Low-priority unfinished tasks:")))
            (tags "customtag"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Tasks marked with customtag:")))
            (alltodo ""))))))
(use-package org-superstar
  :ensure t
  :config
  (setq
   org-superstar-headline-bullets-list '("‚óâ" "‚óè" "‚óã" "‚óÜ" "‚óè" "‚óã" "‚óÜ")
   org-superstar-itembullet-alist '((?+ . ?‚û§) (?- . ?‚ú¶)))
  :hook
  (org-mode . org-superstar-mode))

#+End_src
#+begin_src emacs-lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
(use-package org-pdftools
  :ensure t
  :after org
  :hook (org-mode . org-pdftools-setup-link))

#+end_src

* Org roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :after org
  :init
  (setq org-roam-directory "~/Documents/roam")
  :custom
  (setq org-roam-capture-templates
	'(("a" "pns" plain (file "~/Documents/roam/pns/pns.org")
	   :target (file+head "pns/%<%Y%m%d%H%M%S>-${slug}.org"
			      "#+title: ${title}\n")
	   :unnarrowed t)
	  ("b" "research" plain (file "~/Documents/roam/research.org")
	   :target (file+head "research/%<%Y%m%d%H%M%S>-${slug}.org"
			      "#+title: ${title}\n")
	   :unnarrowed t)))

  :bind (("C-c n l" . org-roam-buffer-toggle)
	 ("C-c n r" . org-roam-node-random)
	 ("C-c n c" . org-roam-capture)
	 ("C-c n f" . org-roam-node-find)
	 ("C-c n i" . org-roam-node-insert))

  :config
  (org-roam-setup))
#+end_src  

* Global key bindings
#+begin_src emacs-lisp
(global-set-key (kbd "C-c r") #'LoadInitDotEl)
(defun LoadInitDotEl () (interactive)(load-file(expand-file-name "init.el" user-emacs-directory)))

(global-set-key (kbd "C-c f") #'OpenConfigDotOrg)
(defun OpenConfigDotOrg () (interactive)(find-file(expand-file-name "config.org" user-emacs-directory)))
(global-set-key (kbd "M-n") #'next-buffer)
(global-set-key (kbd "M-p") #'previous-buffer)
(global-set-key (kbd "C-e") #'evil-mode)

;; vterm toggle 

(global-set-key (kbd "C-o") #'vterm-toggle-cd)

;; set leader key in all states
					;   (evil-set-leader nil (kbd "C-SPC"))

;; set leader key in normal state
					;  (evil-set-leader 'normal (kbd "SPC"))

;; set local leader
					; (evil-set-leader 'normal "," t)
					;(define-key 'normal 'global (kbd "C-e") #'evil-mode)
#+end_src

* Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' ‚Ä¶ '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' ‚Ä¶ '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' ‚Ä¶ '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' ‚Ä¶ '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' ‚Ä¶ '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' ‚Ä¶ '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' ‚Ä¶ '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' ‚Ä¶ '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' ‚Ä¶ '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' ‚Ä¶ '#+END_VERSE'         |


#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

* Pdf-tools
#+begin_src emacs-lisp
(use-package pdf-tools
  :ensure t
  :after (org-noter)
  :bind (:map pdf-view-mode-map
	      ("C-o" . org-noter))
  :config 
  (add-hook 'pdf-view-mode #'(lambda() (blink-cursor-mode -1)))
  )
(add-hook 'dov-view-mode #'(lambda() ('pdf-view-mode)))
#+end_src
* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
  
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :ensure t
  :after all-the-icons
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
(use-package all-the-icons-ibuffer
  :ensure t
  :after all-the-icons
  :hook (ibuffer-mode . (lambda () (all-the-icons-ibuffer-mode t))))
#+end_src
* Latex 
#+begin_src emacs-lisp
(use-package auctex
  :requires texsite
  :ensure t)
(use-package latex-preview-pane
  :commands (latex-preview-pane)
  :after auctex
  :ensure t)

;; latex from internet
;; AucTeX settings
(setq TeX-PDF-mode t)
(add-hook 'LaTeX-mode-hook
	  (lambda ()
	    (push
	     '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
	       :help "Run latexmk on file")
	     TeX-command-list)))
(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))

(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
(setq TeX-view-program-list
      '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

(custom-set-variables
 '(TeX-source-correlate-method 'synctex)
 '(TeX-source-correlate-mode t)
 '(TeX-source-correlate-start-server t))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


#+end_src

* Magit 
#+begin_src epmacs-lisp
  (use-package magit
    :ensure t)
#+end_src

* Vertico 
#+begin_src emacs-lisp
;; Enable vertico
(use-package vertico
  :ensure t
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;;    (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  )
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :ensure t
  :init
  (savehist-mode 1))

;; Optionally use the `orderless' completion style.

(use-package emacs
  :ensure t
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
		  (replace-regexp-in-string
		   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		   crm-separator)
		  (car args))
	  (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
	'(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
(use-package vertico-directory
  :after vertico
  :ensure nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
	      ("RET" . vertico-directory-enter)
	      ("M-DEL" . vertico-directory-delete-char)
	      ("DEL" . vertico-directory-delete-word)
              ("TAB" . minibuffer-complete))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

* OJ and YAsnippets

#+begin_src emacs-lisp
					;(use-package modern-cpp-font-lock
					;:ensure t)
					;(add-hook 'c++-mode-hook #'modern-c++-font-lock-mode)
;;(use-package oj
;;  :ensure t
;;  :defer t
;;  :init
;;  (setq oj-home-dir "~/Documents/contest"))

(use-package yasnippet 
  :ensure t
  :defer t
  :init
  ;; TODO emacs is not setting the yas-snippet dirst , have done manually now
  (setq yas-snippet-dirs
	'("~/.emacs.d/snippets" "~/.emacs.d/elpa/yasnippet-snippets-1.0/snippets"))
  (yas-global-mode t))

(use-package yasnippet-snippets
  :ensure t
  :after yasnippet)

#+end_src

* CC-mode 
#+begin_src emacs-lisp
(use-package cc-mode
  :ensure t
  :init 
  (defun ContestCompileAndRun()
    (interactive)
    (save-buffer)
    (let* ((src (file-name-nondirectory (buffer-file-name)))
	   (exe (file-name-sans-extension src)))
      (compile (concat "g++-13 -std=c++20 -Wall -Wextra -Wshadow -DONPC -O2 -g " src " -o " exe " && timeout 5s ./" exe " <inp" exe))))

  (defun ContestCompile()
    (interactive)
    (save-buffer)
    (let* ((src (file-name-nondirectory (buffer-file-name)))
	   (exe (file-name-sans-extension src)))
      (compile (concat "g++-13  -std=c++20 -Wall -Wextra -Wshadow -DONPC -O2 -g " src " -o " exe))))

  (defun FindInputFile()
    (interactive)
    (let* ((exe (file-name-sans-extension (file-name-nondirectory (buffer-file-name)))))
      (find-file-other-window (concat "inp" exe))))
  :bind 
  (("<f10>" . ContestCompileAndRun)
   ("<f9>" . ContestCompile) 
   ("C-c i" . FindInputFile)))
(setq-default c-basic-offset 4)
#+end_src
* Flycheker
#+begin_src emacs-lisp
					;(use-package flycheck
					;  :ensure t
					;  :custom
					;  (setq flycheck-python-flake8-executable "python3")
					;  (setq flycheck-python-pycompile-executable "python3")
					;
					;  (setq flycheck-clang-language-standard "c++20")
					;  (setq flycheck-clang-definitions (list "ONPC"))
					;  (setq flycheck-clang-args (list  "-include-pch stdc++.h.pch -fsanitize=address -std=c++20 -Wall -Wextra -Wshadow -DONPC -O2 -g "))
					;  (setq flycheck-clang-includes (list '"algorithm" '"bitset" '"complex" '"deque" '"functional" '"fstream" '"exception" '"iomanip" '"queue" '"map" '"set" '"stack" '"string" '"vector"
					;									  '"chrono" '"random" '"regex" '"system_error" '"tuple" '"unordered_map" '"unordered_set" '"climits" '"limits" '"list" '"locale"
					;									  '"array" '"forward_list" '"iostream")))
(quickrun-set-default "c" "c/clang")
(quickrun-set-default "c++" "c++/clang++")
					;(global-flycheck-mode 1)
(use-package eglot :ensure t)
(add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
(add-hook 'c-mode-hook 'eglot-ensure)
(add-hook 'c++-mode-hook 'eglot-ensure)

#+end_src

* Clang-format 
#+begin_src emacs-lisp
(use-package clang-format
  :ensure t
  :commands (clang-format)
  :init
  (setq clang-format-fallback-style "WebKit")
  (setq clang-format-fallback-style "WebKit"))

(use-package clang-format+
  :ensure t
  :commands (clang-format+-mode)
  :init
  (add-hook 'c-mode-common-hook #'clang-format+-mode)
  (add-hook 'c++-mode-hook #'clang-format+-mode)
  (setq clang-format+-always-enable t)
  )
#+end_src

* Clean file
#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . , (expand-file-name "tmp/backups/" user-emacs-directory))))
;; auto-save-mode doesn't create the path automatically!
(make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)

(setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
      auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))

(use-package no-littering
  :ensure t)
#+end_src
* Python 
#+begin_src emacs-lisp
(use-package python
  :ensure t
  :custom
  (setq
   python-shell-interpreter "ipython"
   python-shell-interpreter-args "-i --simple-prompt"
   python-shell-prompt-regexp "In \\[[0-9]+\\]: "
   python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
   python-shell-completion-setup-code
   "from IPython.core.completerlib import module_completion"
   python-shell-completion-module-string-code
   "';'.join(module_completion('''%s'''))\n"
   python-shell-completion-string-code
   "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"
   )

					;(add-hook 'python-mode-hook (lamda ()(setq anaconda-mode nil)))

  (defun my-python-format-region (Begin End)
    "Format the current region file using `xah-python-formatter-software'.
    The region must be a valid python code.
    File is saved first.
    URL `http://xahlee.info/emacs/emacs/xah_format_python_code.html'
    Version 2022-08-25 2022-08-28"
    (interactive)
    (shell-command-on-region
     Begin End
     (format "%s - -q" "/opt/homebrew/bin/black")
     nil
     t))

  (defun my-python-format-buffer ()
    "Format the current buffer file by calling `xah-python-formatter-software'.
    If buffer is a file, it is saved first.

    URL `http://xahlee.info/emacs/emacs/xah_format_python_code.html'
    Version 2022-08-25 2022-08-28"
    (interactive)
    (let (($buffFileName (buffer-file-name)))
      (if $buffFileName
	  (progn
					;(save-buffer)
	    (shell-command
	     (format "%s %s -q" "/opt/homebrew/bin/black "$buffFileName))
	    (revert-buffer t t t) )
	(my-python-format-region (point-min) (point-max))))
    ;; (user-error "buffer should be a file. Use `xah-python-format-region' instead.")
    )
					;(add-hook 'before-save-hook #'my-python-format-buffe)
  (add-hook 'python-mode-hook
	    (lambda () (add-hook 'after-save-hook #'my-python-format-buffer nil 'local))))



#+end_src

* Vterm
#+begin_src emacs-lisp
(use-package vterm
  :ensure t)
#+end_src

* Vterm-Toggle 
[[https://github.com/jixiuf/vterm-toggle][vterm-toggle]] toggles between the vterm buffer and whatever buffer you are editing.

#+begin_src emacs-lisp
(use-package vterm-toggle
  :ensure t
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
	       '((lambda (buffer-or-name _)
		   (let ((buffer (get-buffer buffer-or-name)))
		     (with-current-buffer buffer
		       (or (equal major-mode 'vterm-mode)
			   (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
		 (display-buffer-reuse-window display-buffer-at-bottom)
		 ;;(display-buffer-reuse-window display-buffer-in-direction)
		 ;;display-buffer-in-direction/direction/dedicated is added in emacs27
		 ;;(direction . bottom)
		 ;;(dedicated . t) ;dedicated is supported in emacs27
		 (reusable-frames . visible)
		 (window-height . 0.4)))
  :bind (
	 :map vterm-mode-map
	 ("C-o" . vterm-toggle-cd)))
#+end_src

* Company
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :demand t
  :commands (global-company-mode)
  :config
  ;; Add yasnippet support for all company backends
  ;; https://github.com/syl20bnr/spacemacs/pull/179
  (defvar company-mode/enable-yas t
	"Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
	(if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
		backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
  (add-hook 'after-init-hook 'global-company-mode)
  )

  #+end_src

* Bookmark+
#+begin_src emacs-lisp
(require 'bookmark+)
 (let ((bookmarkplus-dir "~/.emacs.d/custom/bookmark-plus/")
              (emacswiki-base "https://www.emacswiki.org/emacs/download/")
              (bookmark-files '( "bookmark+-mac.el" "bookmark+.el""bookmark+-bmu.el" "bookmark+-key.el" "bookmark+-lit.el" "bookmark+-1.el")))
          (require 'url)
          (add-to-list 'load-path bookmarkplus-dir)
          (make-directory bookmarkplus-dir t)
          (mapcar (lambda (arg)
                    (let ((local-file (concat bookmarkplus-dir arg)))
                      (unless (file-exists-p local-file)
                        (url-copy-file (concat emacswiki-base arg) local-file t))))
                    bookmark-files)
          (byte-recompile-directory bookmarkplus-dir 0)
          (require 'bookmark+))
#+end_src>

* org-noter
#+begin_src emacs-lisp
(use-package org-noter
  :ensure t)
#+end_src>

* last-todo
#+begin_src emacs-lisp
(desktop-load-default)
(desktop-read)
(add-hook 'kill-emacs-hook
		  '(lambda ()
		     (desktop-truncate search-ring 3)
		     (desktop-truncate regexp-search-ring 3)))
#+end_src>

* Eglot
#+begin_src emacs-lisp
(progn
    (customize-set-variable 'eglot-autoshutdown t)
    (customize-set-variable 'eglot-extend-to-xref t)
    (customize-set-variable 'eglot-ignored-server-capabilities
        (quote (:documentFormattingProvider :documentRangeFormattingProvider)))

            (with-eval-after-load 'eglot
        (add-to-list 'eglot-server-programs
            '((c-mode c++-mode)
                 . ("clangd"
                       "-j=8"
                       "--log=error"
                       "--malloc-trim"
                       "--background-index"
                       "--clang-tidy"
                       "--cross-file-rename"
                       "--completion-style=detailed"
                       "--pch-storage=memory"
                       "--header-insertion=never"
                       "--header-insertion-decorators=0"))))

    (add-hook 'c-mode-hook #'eglot-ensure)
    (add-hook 'c++-mode-hook #'eglot-ensure)
    (add-hook 'rustic-mode-hook #'eglot-ensure))
#+end_src>
